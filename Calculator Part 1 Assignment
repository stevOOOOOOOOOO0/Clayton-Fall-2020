proc float Addition(float $Numbers[])
 {
	float $Answer = 0;
	for($i = 0; $i < size($Numbers); $i++)
	{
		$Answer += $Numbers[$i];
	}
	return $Answer;
 }
 
 proc float Subtraction(float $Numbers[])
 {
	float $Answer = 0;
	for($i = 0; $i < size($Numbers); $i++)
	{
		$Answer -= $Numbers[$i];
	}
	return $Answer;
 }
 
 proc float Multiplication(float $Numbers[])
 {
	float $Answer = 1;
	for($i = 0; $i < size($Numbers); $i++)
	{
		$Answer *= $Numbers[$i];
	}
	return $Answer;
 }
 
 proc float Division(float $Numbers[])
 {
	float $Answer = $Numbers[0];
	for($i = 1; $i < size($Numbers); $i++)
	{
		$Answer /= $Numbers[$i];
	}
	return $Answer;
 }
 
 proc float Power(float $x, float $n)
 {
	float $Answer = $x;
	for(float $i = 1; $i < $n; $i++)
	{
		$Answer *= $x;
	}
	return $Answer;
 }
 
 proc float Mean(float $Numbers[])
 {
	float $Answer = 0;
	for($i = 0; $i < size($Numbers); $i++)
	{
		$Answer += $Numbers[$i];
	}
	$Answer /= size($Numbers);
	return $Answer;
 }

  proc float Median(float $Numbers[])
 {
	float $LowestNum = $Numbers[0];
	float $ReturnNumber = 0;
	float $NewNumbers[];
	
	$NewNumbers = sort($Numbers);
	if (size($NewNumbers) % 2 == 1) // this is if the number of elements is odd
	{
		return $NewNumbers[size($NewNumbers)/2];
	}
	else
	{
	    float $index = size($NewNumbers);
	    $index /= 2;
	    $ReturnNumber = $NewNumbers[int($index)];
	    $index -=1;
	    $ReturnNumber += $NewNumbers[int($index)];
	    $ReturnNumber /= 2;
	    return $ReturnNumber;
	}
 }
 
 proc float Mode(float $Numbers[])
 {
	float $Most = 0;
	float $HowManyMost = 0;
	float $TempHowManyMost = 0;
	
	for($i = 0; $i < size($Numbers); $i++)
	{
	   $TempHowManyMost = 0;
		for($j = 0; $j < size($Numbers); $j++)
		{
			if ($Numbers[$j] == $Numbers[$i])
			{
				$TempHowManyMost++;
			}
			if ($TempHowManyMost > $HowManyMost)
			{
				$HowManyMost = $TempHowManyMost;
				$Most = $Numbers[$j];
			}
		}
	}
	return $Most;
 }
